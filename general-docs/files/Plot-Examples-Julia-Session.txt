
===========================================================
wruslan@HPEliteBook8470p-Ub2004-rt38:~$ date
Tue 01 Dec 2020 10:53:24 AM +08

wruslan@HPEliteBook8470p-Ub2004-rt38:~$ uname -a
Linux HPEliteBook8470p-Ub2004-rt38 5.4.66-rt38 #1 SMP PREEMPT_RT 
Sat Sep 26 16:51:59 +08 2020 x86_64 x86_64 x86_64 GNU/Linux

wruslan@HPEliteBook8470p-Ub2004-rt38:~$ lsb_release -a
LSB Version:    core-11.1.0ubuntu2-noarch:security-11.1.0ubuntu2-noarch
Distributor ID:	Ubuntu
Description:    Ubuntu 20.04.1 LTS
Release:        20.04
Codename:       focal
wruslan@HPEliteBook8470p-Ub2004-rt38:~$ 

REFERENCES
===========================================================
http://docs.juliaplots.org/latest/
http://docs.juliaplots.org/latest/tutorial
https://plotly.com/julia/3d-surface-plots/
https://discourse.julialang.org/t/plotting-a-3d-surface/17143/9

===========================================================
EXAMPLE 1
===========================================================
julia> using Plots

julia> x = 1:10; 

julia> y = rand(10);

julia> plot(x, y)

julia> 
===========================================================
EXAMPLE 2
===========================================================
julia> x = 1:10; y = rand(10, 2)
10×2 Array{Float64,2}:
 0.787553  0.482152
 0.423278  0.769002
 0.660196  0.0314776
 0.875877  0.32205
 ⋮         
 0.642895  0.912093
 0.669939  0.585128
 0.325471  0.997049
 0.688951  0.597479

julia> plot(x, y)

julia> 
===========================================================
EXAMPLE 3
===========================================================
julia> using Plots

julia> gr(size = (300, 300), legend = false) 
Plots.GRBackend()

julia> x = 1:10; y = rand(10, 3)
10×3 Array{Float64,2}:
 0.692571   0.0338375  0.618978
 0.0758071  0.392762   0.56096
 0.201322   0.420362   0.927907
 0.48523    0.567654   0.456362
 ⋮                     
 0.70167    0.468981   0.910564
 0.614668   0.58688    0.459656
 0.93094    0.559283   0.123185
 0.0723816  0.571832   0.251631

julia> plot(x,y);

julia> 
===========================================================
EXAMPLE 4
===========================================================
julia> z = rand(10)
10-element Array{Float64,1}:
 0.30877797941871465
 0.2955796215821671
 0.617515151697807
 0.1854436916887492
 ⋮
 0.916661709093264
 0.095351373569867
 0.658196786102256
 0.11725976143871142

julia> gr(size = (600, 300), legend = false)
Plots.GRBackend()

julia> plot!(x, z)

julia> 

===========================================================
EXAMPLE 5
===========================================================
p1 = plot(x, y) # Make a line plot
p2 = scatter(x, y) # Make a scatter plot
p3 = plot(x, y, xlabel = "This one is labelled", lw = 3, title = "Subtitle")
p4 = histogram(x, y) # Four histograms each with 10 points? Why not!
plot(p1, p2, p3, p4, layout = (2, 2), legend = false)

===========================================================
EXAMPLE 6
===========================================================
julia> Pkg.add("RDatasets")
  Resolving package versions...
  Installed RData ───── v0.7.3
  Installed RDatasets ─ v0.7.3
Updating `~/.julia/environments/JuliaPro_v1.5.1-1/Project.toml`
  [ce6b1742] + RDatasets v0.7.3
Updating `~/.julia/environments/JuliaPro_v1.5.1-1/Manifest.toml`
  [df47a6cb] + RData v0.7.3
  [ce6b1742] + RDatasets v0.7.3

julia> using RDatasets, StatsPlots
[ Info: Precompiling RDatasets [ce6b1742-4840-55fa-b093-852dadbb1d8b]
[ Info: Precompiling StatsPlots [f3b207a7-027a-5e70-b257-86293d7955fd]

julia> iris = dataset("datasets", "iris")
150×5 DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species   │
│     │ Float64     │ Float64    │ Float64     │ Float64    │ Cat…      │
├─────┼─────────────┼────────────┼─────────────┼────────────┼───────────┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ setosa    │
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ setosa    │
⋮
│ 148 │ 6.5         │ 3.0        │ 5.2         │ 2.0        │ virginica │
│ 149 │ 6.2         │ 3.4        │ 5.4         │ 2.3        │ virginica │
│ 150 │ 5.9         │ 3.0        │ 5.1         │ 1.8        │ virginica │

julia> @df iris marginalhist(:PetalLength, :PetalWidth)

julia> 

===========================================================
3D Plots
===========================================================
http://docs.juliaplots.org/latest/
https://plotly.com/julia/3d-surface-plots/
https://discourse.julialang.org/t/plotting-a-3d-surface/17143/9


julia> import Pkg; Pkg.add("Plotly")
  Resolving package versions...
  Installed Plotly ─ v0.3.0
Updating `~/.julia/environments/JuliaPro_v1.5.4-1/Project.toml`
  [58dd65bb] + Plotly v0.3.0
Updating `~/.julia/environments/JuliaPro_v1.5.4-1/Manifest.toml`
  [cd3eb016] ↓ HTTP v0.9.5 ⇒ v0.8.19
  [58dd65bb] + Plotly v0.3.0
  [189a3867] ↓ Reexport v1.0.0 ⇒ v0.2.0
  [5c2747f8] - URIs v1.2.0

===========================================================
julia> using Plots

julia> pyplot()
Plots.PyPlotBackend()

julia> a=rand(10);b=rand(10);c=rand(10);

julia> scatter(a,b,c,size=(500,500))

julia> 


===========================================================
ALHAMDULILLAH 3 TIMES WRY
===========================================================

